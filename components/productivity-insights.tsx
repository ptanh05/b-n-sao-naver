import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import type { Task } from "@/lib/types"
import {
  calculateCompletionRate,
  calculateProductivityStreak,
  getOverdueTasks,
  calculateAverageCompletionTime,
  getTasksByPriority,
} from "@/lib/analytics-utils"

interface ProductivityInsightsProps {
  tasks: Task[]
}

export function ProductivityInsights({ tasks }: ProductivityInsightsProps) {
  const completionRate = calculateCompletionRate(tasks)
  const streak = calculateProductivityStreak(tasks)
  const overdueTasks = getOverdueTasks(tasks)
  const avgCompletionTime = calculateAverageCompletionTime(tasks)
  const priorityDistribution = getTasksByPriority(tasks)

  const getInsights = () => {
    const insights = []

    if (completionRate >= 80) {
      insights.push({
        type: "success",
        icon: "‚úÖ",
        title: "Hi·ªáu su·∫•t xu·∫•t s·∫Øc!",
        description: `B·∫°n ƒë√£ ho√†n th√†nh ${completionRate.toFixed(1)}% nhi·ªám v·ª•. Ti·∫øp t·ª•c duy tr√¨!`,
        action: "H√£y th·ª≠ th√°ch b·∫£n th√¢n v·ªõi nhi·ªám v·ª• kh√≥ h∆°n.",
      })
    } else if (completionRate < 50) {
      insights.push({
        type: "warning",
        icon: "‚ö†Ô∏è",
        title: "C·∫ßn c·∫£i thi·ªán hi·ªáu su·∫•t",
        description: `T·ª∑ l·ªá ho√†n th√†nh ch·ªâ ${completionRate.toFixed(1)}%. H√£y xem x√©t l·∫°i k·∫ø ho·∫°ch.`,
        action: "Th·ª≠ chia nh·ªè nhi·ªám v·ª• l·ªõn th√†nh c√°c b∆∞·ªõc nh·ªè h∆°n.",
      })
    }

    if (streak >= 7) {
      insights.push({
        type: "success",
        icon: "üìà",
        title: "Chu·ªói th√†nh c√¥ng ·∫•n t∆∞·ª£ng!",
        description: `B·∫°n ƒë√£ duy tr√¨ ${streak} ng√†y l√†m vi·ªác hi·ªáu qu·∫£ li√™n ti·∫øp.`,
        action: "H√£y th∆∞·ªüng cho b·∫£n th√¢n v√† ti·∫øp t·ª•c duy tr√¨!",
      })
    } else if (streak === 0) {
      insights.push({
        type: "info",
        icon: "üéØ",
        title: "B·∫Øt ƒë·∫ßu chu·ªói m·ªõi",
        description: "H√£y ho√†n th√†nh √≠t nh·∫•t 1 nhi·ªám v·ª• h√¥m nay ƒë·ªÉ b·∫Øt ƒë·∫ßu chu·ªói th√†nh c√¥ng.",
        action: "Ch·ªçn 1 nhi·ªám v·ª• d·ªÖ ƒë·ªÉ t·∫°o ƒë·ªông l·ª±c.",
      })
    }

    if (overdueTasks.length > 0) {
      insights.push({
        type: "error",
        icon: "‚ö†Ô∏è",
        title: "C√≥ nhi·ªám v·ª• qu√° h·∫°n",
        description: `${overdueTasks.length} nhi·ªám v·ª• ƒë√£ qu√° deadline.`,
        action: "∆Øu ti√™n ho√†n th√†nh c√°c nhi·ªám v·ª• qu√° h·∫°n tr∆∞·ªõc.",
      })
    }

    const highPriorityIncomplete = priorityDistribution.filter((p) => p.priority >= 4 && p.completed < p.total)

    if (highPriorityIncomplete.length > 0) {
      insights.push({
        type: "warning",
        icon: "üìà",
        title: "T·∫≠p trung v√†o ∆∞u ti√™n cao",
        description: "B·∫°n c√≥ nhi·ªám v·ª• ∆∞u ti√™n cao ch∆∞a ho√†n th√†nh.",
        action: "D√†nh 2-3 gi·ªù ƒë·∫ßu ng√†y cho nhi·ªám v·ª• quan tr·ªçng nh·∫•t.",
      })
    }

    return insights
  }

  const insights = getInsights()

  const getInsightColor = (type: string) => {
    switch (type) {
      case "success":
        return "border-green-200 bg-green-50"
      case "warning":
        return "border-amber-200 bg-amber-50"
      case "error":
        return "border-red-200 bg-red-50"
      default:
        return "border-blue-200 bg-blue-50"
    }
  }

  return (
    <div className="space-y-6">
      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">T·ª∑ l·ªá ho√†n th√†nh</p>
                <p className="text-2xl font-bold">{completionRate.toFixed(1)}%</p>
              </div>
              <span className="text-2xl">‚úÖ</span>
            </div>
            <Progress value={completionRate} className="mt-2" />
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">Chu·ªói th√†nh c√¥ng</p>
                <p className="text-2xl font-bold">{streak} ng√†y</p>
              </div>
              <span className="text-2xl">üìà</span>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">Qu√° h·∫°n</p>
                <p className="text-2xl font-bold text-red-600">{overdueTasks.length}</p>
              </div>
              <span className="text-2xl">‚ö†Ô∏è</span>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Insights and Recommendations */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <span>üéØ</span>
            Ph√¢n t√≠ch & ƒê·ªÅ xu·∫•t
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {insights.map((insight, index) => (
              <div key={index} className={`p-4 rounded-lg border ${getInsightColor(insight.type)}`}>
                <div className="flex items-start gap-3">
                  <span className="text-xl">{insight.icon}</span>
                  <div className="flex-1">
                    <h4 className="font-semibold mb-1">{insight.title}</h4>
                    <p className="text-sm text-muted-foreground mb-2">{insight.description}</p>
                    <p className="text-sm font-medium">{insight.action}</p>
                  </div>
                </div>
              </div>
            ))}

            {insights.length === 0 && (
              <div className="text-center py-8 text-muted-foreground">
                <span className="text-4xl block mb-4">‚è∞</span>
                <p>Ch∆∞a c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch. H√£y th√™m v√† ho√†n th√†nh m·ªôt s·ªë nhi·ªám v·ª•!</p>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Priority Distribution */}
      <Card>
        <CardHeader>
          <CardTitle>Ph√¢n b·ªï theo ƒë·ªô ∆∞u ti√™n</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {priorityDistribution.map((item) => (
              <div key={item.priority} className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <Badge variant={item.priority >= 4 ? "destructive" : item.priority >= 3 ? "default" : "secondary"}>
                    ∆Øu ti√™n {item.priority}
                  </Badge>
                  <span className="text-sm text-muted-foreground">
                    {item.completed}/{item.total} ho√†n th√†nh
                  </span>
                </div>
                <Progress value={item.total > 0 ? (item.completed / item.total) * 100 : 0} className="w-24" />
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
